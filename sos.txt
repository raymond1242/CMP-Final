goal ::= statement p_goal
p_goal ::= statement p_goal
p_goal ::= ''

statement ::= declaration endline
statement ::= operation endline
statement ::= while_bucle
statement ::= for_bucle
statement ::= conditional

while_bucle ::= while ( comparison ) { p_goal }

for_bucle ::= for ( for_bucle_p endline comparison endline operation ) { p_goal }
for_bucle_p ::= declaration for_bucle_p_p
for_bucle_p_p ::= = operation
for_bucle_p ::= operation

conditional ::= if ( comparison ) { p_goal }

comparison ::= operation comparison_op operation

comparison_op ::= !=
comparison_op ::= ==
comparison_op ::= <
comparison_op ::= >
comparison_op ::= <=
comparison_op ::= >=

declaration ::= id name

operation ::= ( operation )

operation ::= name operation_assign
operation_assign ::= = operation
operation_assign ::= + operation
operation_assign ::= - operation
operation_assign ::= * operation
operation_assign ::= / operation
operation_assign ::= ( operation )
operation_assign ::=  . name ( operation ) operation_assign
operation_assign ::= ''

operation ::= number operation_number_p
operation_number_p ::= number_op operation
operation_number_p ::= ''
number_op ::= +
number_op ::= -
number_op ::= *
number_op ::= /

operation ::= string operation_string_p
operation_string_p ::= string_op operation
operation_string_p ::= ''
string_op ::= +

endline ::= ;

